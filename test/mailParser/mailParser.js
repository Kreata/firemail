this.mailParserTests = {

    "Create mailParser instance, load test file": function(test){
        loadParserTestFile("M1", function(err, data){
            test.ifError(err);
            test.ok(data);
            
            var mc = mailParser();
            test.ok(true, mc instanceof mailParser);
            test.done();
        });
    },

    "M1": function(test){
        loadParserTestFile("M1", function(err, data){
            test.ifError(err);
            test.ok(data);

            var mc = mailParser();
            mc.write(data);
            mc.end();
            
            var tree = mc.getParsedTree();

            test.deepEqual( tree.headers, {subject:"M1", 'mime-version':"1.0 (Generated by hand by paf@swip.net)", to:"(requester of the test)", from:"mimetest-human@imc.org"});
            test.equal(tree.body, "  M1\n    Always generate a \"MIME-Version: 1.0\" header field.\n\n\n");

            test.done();
        });
    },

    "M1-1": function(test){
        loadParserTestFile("M1-1", function(err, data){
            test.ifError(err);
            test.ok(data);

            var mc = mailParser();
            mc.write(data);
            mc.end();
            
            var tree = mc.getParsedTree();

            test.deepEqual( tree.headers, {"subject":"M1-1","mime-version":"1.0","to":"(requester of the test)","from":"mimetest-human@imc.org"});
            test.equal(tree.body, "  M1\n    Always generate a \"MIME-Version: 1.0\" header field.\n\n\n");

            test.done();
        });
    },

    "M1-2": function(test){
        loadParserTestFile("M1-2", function(err, data){
            test.ifError(err);
            test.ok(data);

            var mc = mailParser();
            mc.write(data);
            mc.end();
            
            var tree = mc.getParsedTree();

            test.deepEqual( tree.headers, {"subject":"M1-2","mime-version":"2.0 (Generated by hand by paf@swip.net)","to":"(requester of the test)","from":"mimetest-human@imc.org"});
            test.equal(tree.body, "  M1\n    Always generate a \"MIME-Version: 1.0\" header field.\n\n    Note that the MIME-version for this message is 2.0.\n\n");

            test.done();
        });
    },

    "firemail-latin_13": function(test){
        loadParserTestFile("firemail-latin_13", function(err, data){
            test.ifError(err);
            test.ok(data);

            var mc = mailParser();
            mc.write(data);
            mc.end();
            
            var tree = mc.getParsedTree();

            test.deepEqual( tree.headers, {"from":"mimetest-human@imc.org","to":"(requester of the test)","mime-version":"1.0 (Generated by hand by paf@swip.net)","content-type":{"content-type":"text/plain","charset":"Latin_13"},"subject":"ÕÄÖÜŠŽ"});
            test.equal(tree.body, "  ÕÄÖÜŠŽ\n\n\n");

            test.done();
        });
    },

    "M2": function(test){
        loadParserTestFile("M2", function(err, data){
            test.ifError(err);
            test.ok(data);

            var mc = mailParser();
            mc.write(data);
            mc.end();
            
            var tree = mc.getParsedTree();

            test.deepEqual( tree.headers, {"from":"mimetest-human@imc.org","to":"(requester of the test)","mime-version":"1.0","content-type":{"content-type":"text/plain"},"content-transfer-encoding":"base64","subject":"M2"});
            test.equal(tree.body, "  M2 \r\n\r\n      Recognize the Content-Transfer-Encoding header field, and decode all\r\n      received data encoded with either the quoted-printable or base64\r\n      implementations. Encode any data sent that is not in seven-bit\r\n      mail-ready representation using one of these transformations and\r\n      include the appropriate Content-Transfer-Encoding header field, unless\r\n      the underlying transport mechanism supports non-seven-bit data, as\r\n      SMTP does not.\r\n\r\n      (Interopabilitet comment: For clarification it is stated that software\r\n      should implement both encodings, and be able to handle mail encoded in\r\n      any of them.)\r\n");

            test.done();
        });
    },

    "M4.1.3": function(test){
        loadParserTestFile("M4.1.3", function(err, data){
            test.ifError(err);
            test.ok(data);

            var mc = mailParser();
            mc.write(data);
            mc.end();
            
            var tree = mc.getParsedTree();

            test.deepEqual( tree.headers, {"from":"mimetest-human@imc.org","to":"(requester of the test)","mime-version":"1.0","content-type":{"content-type":"text/plain","charset":"ISO-8859-7"},"content-transfer-encoding":"quoted-printable","subject":"M4.1.3"});
            test.equal(tree.body, "  This character ------->  Χ\n\n  has decimal value > 127. It should only be visible IF you can\n  show the character set ISO-8859-7. It should be visible as\n  the \"GREEK CAPITAL LETTER CHI\".\n\n  M4.1.3\n       Recognize the \"ISO-8859-*\" character sets to the extent of being able\n       to display those characters that are common to ISO-8859-* and\n       US-ASCII, namely all characters represented by octet values 0-127.\n\n       (Interoperability comment: What glyphs to show for octets in the\n       range 128-255 is up to the software itself.)\n");

            test.done();
        });
    }

}